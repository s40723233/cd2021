var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'WORKS', 'text': '', 'tags': '', 'url': 'WORKS.html'}, {'title': 'stage 1', 'text': '', 'tags': '', 'url': 'stage 1.html'}, {'title': 'W1', 'text': '打開GITHUB \n 進入reposipories \n 開新專案 \n \n 輸入自己的組別 \n \n \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2~W3', 'text': 'W2主題擺鐘棘輪 \n \n 動機:看到時鐘就想到光陰的流逝，藉由研究單擺鐘的運動原理來提醒我們珍惜時間的重要性。 \n 組長:40723141 楊先豪 \n 組員:40723233 陳謙諭 \n 一開始打算著手研究單擺鐘內部構造的時候我們以為構造會非常複雜。 \n \n 後來上網查詢了很多資料才發現，單擺鐘最重要的是諸多齒輪當中一個叫擒縱機構的部分。 \n \n 它的運作原理是靠著鐘擺底下掛的重物來回擺盪，帶動擒爪左右轉動，當轉動到底時，擒爪會卡入擒輪的齒縫使其停滯，來達到秒針運作的效果。 \n \n 擒縱器因為不同的設計者有多種類型，每一款單擺鐘的擒縱器形式都不一定相同 \n \n 上網查找之後我們找到的資料幾乎都是運作方式的講解圖，我們嘗試用很多關鍵字搜尋過，像是「擒縱機構」加上「零件圖」、「工程圖」、「規格」等字眼，直到最後用擒縱機構的英文「escapement」加上「cad」才找到有標示尺寸的零件圖，之後我們就開始進行繪製。 \n \n 零件一 \n \n 零件二 \n \n 零件三 \n \n 組合圖 \n \n', 'tags': '', 'url': 'W2~W3.html'}, {'title': 'W4', 'text': '零件組合 \n 組合圖 \n \n \n', 'tags': '', 'url': 'W4.html'}, {'title': 'W5', 'text': '\n', 'tags': '', 'url': 'W5.html'}, {'title': 'stage 2', 'text': '', 'tags': '', 'url': 'stage 2.html'}, {'title': 'W6', 'text': '題目介紹 \n 擬定題目:窗簾機構 \n 想讓窗簾能夠像人的瞳孔自動調整進光量,所以藉由下圖伸縮機構及參考網站,讓窗簾智慧化 \n \n 工作分配 \n 40823227: 編輯小組倉儲、網站、模擬機構 \n 40823241:繪圖、製作簡報、影片 \n 40723233:參與討論 \n 40723141:提供題材 \n', 'tags': '', 'url': 'W6.html'}, {'title': 'W7', 'text': '機構設計 \n 從簡圖開始到網路上查詢 \n 最後找到模擬作動的gif檔 \n 所以我們決定按照類似的機構製作 窗簾伸縮機構 \n 已先繪製完主體為優先 \n 這是我們設計的零組件: \n 滑軌 \n \n 連桿 \n \n 輪子 \n \n 感光裝置 \n \n 布幕 \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '機構組裝 \n 將上禮拜的零組件組合起來 \n 滑軌 \n \n 連桿 \n \n 輪子 \n \n 感光裝置 \n \n 布幕 \n \n 組合完成機構 \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '\n', 'tags': '', 'url': 'W9.html'}, {'title': 'stage 3', 'text': '', 'tags': '', 'url': 'stage 3.html'}, {'title': 'W10 小組task', 'text': 'task 1 \n 讀取 stage3_2a.txt, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結. \n 已知 \xa0 stage3_2a.txt \xa0 與 \xa0 stage3_2b.txt \xa0 內容, 以及初步資料讀取程式: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n \n \n \n # open file, default is read mode, since txt content no chinese char \n # no encoding = "UTF-8" is needed \n with  open ( "stage3_2a.txt" ) as fh: \n \xa0\xa0\xa0\xa0 # readlines will read into the whole line and put into list format \n \xa0\xa0\xa0\xa0 # has \\n at the end of each line \n \xa0\xa0\xa0\xa0 data  =   fh.readlines() \n #print(len(data)) \n for   i  in   range ( len (data)): \n \xa0\xa0\xa0\xa0 group  =   data[i].rstrip( "\\n" ).split( "\\t" ) \n \xa0\xa0\xa0\xa0 print (group) \n # the following will use group data to generate needed html \n \n \n \n \n \n \n \n 以下為每組亂數抽選 2 名組員的程式碼: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n \n \n \n # open file, default is read mode, since txt content no chinese char \n # no encoding = "UTF-8" is needed \n import   random \n \xa0 \n # number of group menber to draw \n num  =   2 \n \xa0 \n # check if data is "" or not \n def   notVacant(data): \n \xa0\xa0\xa0\xa0 if   data  = =   "": \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   False \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   True \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n with  open ( "stage3_2b.txt" ) as fh: \n \xa0\xa0\xa0\xa0 # readlines will read into the whole line and put into list format \n \xa0\xa0\xa0\xa0 # has \\n at the end of each line \n \xa0\xa0\xa0\xa0 data  =   fh.readlines() \n #print(len(data)) \n # big group list \n bgroup  =   [] \n # count from the second group member \n sgroup  =   [] \n for   i  in   range ( len (data)): \n \xa0\xa0\xa0\xa0 group  =   data[i].rstrip( "\\n" ).split( "\\t" ) \n \xa0\xa0\xa0\xa0 #print(group) \n \xa0\xa0\xa0\xa0 # use mem to count the total number of each group \n \xa0\xa0\xa0\xa0 mem  =   0 \n \xa0\xa0\xa0\xa0 # final group data \n \xa0\xa0\xa0\xa0 fgroup  =   [] \n \xa0\xa0\xa0\xa0 # count from the second group member, eliminate the first element \n \xa0\xa0\xa0\xa0 sgroup  =   group[ 1 :] \n \xa0\xa0\xa0\xa0 # get only the odd index number \n \xa0\xa0\xa0\xa0 igroup  =   [i  for   i  in   range ( len (sgroup))  if   i  %   2   = =   1 ] \n \xa0\xa0\xa0\xa0 for   j  in   igroup: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # index starts from 0 which is j-1 when j=1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   notVacant(sgroup[j - 1 ])  = =   True : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 mem  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fgroup.append(sgroup[j - 1 ]) \n \xa0\xa0\xa0\xa0 print ( "group "   +   str (i + 1 )  +   ":"   +   str (mem)) \n \xa0\xa0\xa0\xa0 # shuffle the fgroup list \n \xa0\xa0\xa0\xa0 random.shuffle(fgroup) \n \xa0\xa0\xa0\xa0 # draw num of member from final group list: fgroup \n \xa0\xa0\xa0\xa0 for   k  in   range (num): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (fgroup[k]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 except : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # num is greater than total number of this group \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "no such member" ) \n \xa0\xa0\xa0\xa0 # seperator \n \xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n # the following will use group data to generate needed html \n \n \n \n \n \n \n \n 以下為各分組倉儲, 分組網站與學員倉儲及學員網站連結: \n 成果: \n stage3-bg1 repo \xa0 | \xa0 stage3-bg1 site \xa0 | \xa0 40823245 repo \xa0 | \xa0 40823245 site \xa0 | \xa0 40823251 repo \xa0 | \xa0 40823251 site \xa0 | \xa0 40823208 repo \xa0 | \xa0 40823208 site \xa0 | \xa0 40823213 repo \xa0 | \xa0 40823213 site \xa0 | \xa0 40823232 repo \xa0 | \xa0 40823232 site \xa0 | \xa0 40823234 repo \xa0 | \xa0 40823234 site \xa0 | \xa0 40823235 repo \xa0 | \xa0 40823235 site \xa0 | \xa0 40823246 repo | \xa0 40823246 site ---------- stage3-bg2 repo \xa0 | \xa0 stage3-bg2 site \xa0 | \xa0 40823217 repo \xa0 | \xa0 40823217 site \xa0 | \xa0 40823201 repo \xa0 | \xa0 40823201 site \xa0 | \xa0 40823209 repo \xa0 | \xa0 40823209 site \xa0 | \xa0 40823210 repo \xa0 | \xa0 40823210 site \xa0 | \xa0 40823206 repo \xa0 | \xa0 40823206 site \xa0 | \xa0 40823207 repo \xa0 | \xa0 40823207 site \xa0 | \xa0 40823223 repo \xa0 | \xa0 40823223 site \xa0 | \xa0 40823224 repo | \xa0 40823224 site ---------- stage3-bg3 repo \xa0 | \xa0 stage3-bg3 site \xa0 | \xa0 40823236 repo \xa0 | \xa0 40823236 site \xa0 | \xa0 40823202 repo \xa0 | \xa0 40823202 site \xa0 | \xa0 40823203 repo \xa0 | \xa0 40823203 site \xa0 | \xa0 40823212 repo \xa0 | \xa0 40823212 site \xa0 | \xa0 40823219 repo \xa0 | \xa0 40823219 site \xa0 | \xa0 40823222 repo \xa0 | \xa0 40823222 site \xa0 | \xa0 40823231-2 repo \xa0 | \xa0 40823231-2 site \xa0 | \xa0 40823244 repo | \xa0 40823244 site ---------- stage3-bg4 repo \xa0 | \xa0 stage3-bg4 site \xa0 | \xa0 40823239 repo \xa0 | \xa0 40823239 site \xa0 | \xa0 s40723140 repo \xa0 | \xa0 s40723140 site \xa0 | \xa0 s40723128 repo \xa0 | \xa0 s40723128 site \xa0 | \xa0 s40723139 repo \xa0 | \xa0 s40723139 site \xa0 | \xa0 s40723106 repo \xa0 | \xa0 s40723106 site \xa0 | \xa0 s40723135 repo \xa0 | \xa0 s40723135 site \xa0 | \xa0 s40723143 repo \xa0 | \xa0 s40723143 site \xa0 | \xa0 s40723215 repo | \xa0 s40723215 site ---------- stage3-bg5 repo \xa0 | \xa0 stage3-bg5 site \xa0 | \xa0 40823221 repo \xa0 | \xa0 40823221 site \xa0 | \xa0 40823204 repo \xa0 | \xa0 40823204 site \xa0 | \xa0 40823205 repo \xa0 | \xa0 40823205 site \xa0 | \xa0 40823220 repo \xa0 | \xa0 40823220 site \xa0 | \xa0 40823228 repo \xa0 | \xa0 40823228 site \xa0 | \xa0 40823237 repo \xa0 | \xa0 40823237 site \xa0 | \xa0 40823242 repo \xa0 | \xa0 40823242 site \xa0 | \xa0 40823250 repo | \xa0 40823250 site \xa0 | \xa0 40832244 repo | \xa0 40832244 site ---------- stage3-bg6 repo \xa0 | \xa0 stage3-bg6 site \xa0 | \xa0 40823225 repo \xa0 | \xa0 40823225 site \xa0 | \xa0 40823214 repo \xa0 | \xa0 40823214 site \xa0 | \xa0 40823218 repo \xa0 | \xa0 40823218 site \xa0 | \xa0 40823211 repo \xa0 | \xa0 40823211 site \xa0 | \xa0 40823248 repo \xa0 | \xa0 40823248 site \xa0 | \xa0 40823247 repo \xa0 | \xa0 40823247 site \xa0 | \xa0 40823216 repo \xa0 | \xa0 40823216 site \xa0 | \xa0 40823238 repo | \xa0 40823238 site ---------- stage3-bg7 repo \xa0 | \xa0 stage3-bg7 site \xa0 | \xa0 40623144 repo \xa0 | \xa0 40623144 site \xa0 | \xa0 40823233 repo \xa0 | \xa0 40823233 site \xa0 | \xa0 s40723224 repo \xa0 | \xa0 s40723224 site \xa0 | \xa0 40823241 repo \xa0 | \xa0 40823241 site \xa0 | \xa0 40423155 repo \xa0 | \xa0 40423155 site \xa0 | \xa0 40823227 repo \xa0 | \xa0 40823227 site \xa0 | \xa0 s40723233 repo \xa0 | \xa0 s40723233 site ---------- \n task 2 \n 請各組員分別將個人在 stage1 與 stage2 所完成的 coppeliasim 場景, 採 Python remote API 進行操控, 並將過程拍成影片後, 放在個人與分組網站上. \n stage3 專案中的 CoppeliaSim 請一律使用 \xa0 4.2.0 版 . \n 範例: \xa0 http://mde.tw/cad2020/content/CoppeliaSim.html \n W10 範例: \n 各班上課時所分配到的內部 IP, 192.168.192.1+組別+排序別 \n 意即, 第五組排序別第一即為該組組長, 其 IP 為 192.168.192.151 \n 以 \xa0 http://mde.tw/cad2020/downloads/coppeliasim/vrep_remoteapi_ex.7z \xa0 為例, 每一個 Python3 remote api 程式執行需要 \xa0 sim.py , \xa0 simConst.py \xa0 與 \xa0 remoteApi.dll \xa0 等三個檔案, 若針對 2w1a.ttt 場景, 以下列 Python 程式對位於 192.168.192.1 伺服器上的 CoppeliaSim 場景進行操控: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n 53 \n 54 \n 55 \n 56 \n 57 \n 58 \n 59 \n 60 \n 61 \n 62 \n 63 \n 64 \n 65 \n 66 \n 67 \n 68 \n 69 \n 70 \n 71 \n 72 \n 73 \n 74 \n 75 \n 76 \n 77 \n 78 \n 79 \n 80 \n 81 \n 82 \n 83 \n 84 \n 85 \n 86 \n 87 \n 88 \n 89 \n 90 \n 91 \n 92 \n 93 \n 94 \n 95 \n 96 \n 97 \n 98 \n 99 \n 100 \n 101 \n 102 \n 103 \n 104 \n \n \n \n import   sim as vrep \n import   math \n import   random \n import   time \n \xa0 \n print   ( \'Start\' ) \n \xa0 \n # Close eventual old connections \n vrep.simxFinish( - 1 ) \n # Connect to V-REP remote server \n clientID  =   vrep.simxStart( \'192.168.192.1\' ,  19997 ,  True ,  True ,  5000 ,  5 ) \n \xa0 \n if   clientID ! =   - 1 : \n \xa0\xa0\xa0\xa0 print   ( \'Connected to remote API server\' ) \n \xa0 \n \xa0\xa0\xa0\xa0 res  =   vrep.simxAddStatusbarMessage( \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 clientID,  "teacher" , \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simx_opmode_oneshot) \n \xa0\xa0\xa0\xa0 if   res  not   in   (vrep.simx_return_ok, vrep.simx_return_novalue_flag): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "Could not add a message to the status bar." ) \n \xa0\xa0\xa0\xa0 # Communication operating mode with the remote API : wait for its answer before continuing (blocking mode) \n \xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiConstants.htm \n \xa0\xa0\xa0\xa0 opmode  =   vrep.simx_opmode_oneshot_wait \n \xa0 \n \xa0\xa0\xa0\xa0 # Try to retrieve motors and robot handlers \n \xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxGetObjectHandle \n \xa0\xa0\xa0\xa0 ret1, wristHandle  =   vrep.simxGetObjectHandle(clientID,  "WristMotor" , opmode) \n \xa0\xa0\xa0\xa0 ret2, elbowHandle  =   vrep.simxGetObjectHandle(clientID,  "ElbowMotor" , opmode) \n \xa0\xa0\xa0\xa0 ret3, shoulderHandle  =   vrep.simxGetObjectHandle(clientID,  "ShoulderMotor" , opmode) \n \xa0\xa0\xa0\xa0 ret4, robotHandle  =   vrep.simxGetObjectHandle(clientID,  "2W1A" , opmode) \n \xa0 \n \xa0\xa0\xa0\xa0 # If handlers are OK, execute three random simulations \n \xa0\xa0\xa0\xa0 if   ret1  = =   0   and   ret2  = =   0   and   ret3  = =   0 : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 random.seed() \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   i  in   range ( 0 ,  3 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Start the simulation \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxStartSimulation \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simxStartSimulation(clientID, opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "----- Simulation started -----" ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Start getting the robot position \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Unlike other commands, we will use a streaming operating mode \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxGetObjectPosition \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pret, robotPos  =   vrep.simxGetObjectPosition(clientID, robotHandle,  - 1 , vrep.simx_opmode_streaming) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "2w1a position: (x = "   +   str (robotPos[ 0 ])  + \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", y = "   +   str (robotPos[ 1 ])  +   ")" ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Start getting the robot orientation \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Unlike other commands, we will use a streaming operating mode \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxGetObjectOrientation \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 oret, robotOrient  =   vrep.simxGetObjectOrientation(clientID, robotHandle,  - 1 , vrep.simx_opmode_streaming) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "2w1a orientation: (x = "   +   str (robotOrient[ 0 ])  +   \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", y = "   +   str (robotOrient[ 1 ])  + \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", z = "   +   str (robotOrient[ 2 ])  +   ")" ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Make the robot move randomly five times \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   j  in   range ( 0 ,  5 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Generating random positions for the motors \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 awrist  =   random.randint( 0 ,  300 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 aelbow  =   random.randint( 0 ,  300 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ashoulder  =   random.randint( 0 ,  300 ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # The control functions use Radians to determine the target position. \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Here, we use maths.radians to convert degrees into radians. \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxSetJointTargetPosition \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "Motors target positions: "   +   str (ashoulder)  +   " "   +   str (aelbow)  +   " "   +   str (awrist)) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simxSetJointTargetPosition(clientID, wristHandle, math.radians(awrist), opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simxSetJointTargetPosition(clientID, elbowHandle, math.radians(aelbow), opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simxSetJointTargetPosition(clientID, shoulderHandle, math.radians(ashoulder), opmode) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Wait in order to let the motors finish their movements \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Tip: there must be a more efficient way to do it... \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 time.sleep( 5 ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Get the motors effective positions after the movement sequence \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxGetJointPosition \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pwrist  =   vrep.simxGetJointPosition(clientID, wristHandle, opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pelbow  =   vrep.simxGetJointPosition(clientID, elbowHandle, opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pshoulder  =   vrep.simxGetJointPosition(clientID, shoulderHandle, opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "Motors reached positions: "   +   str (ashoulder)  +   " "   +   str (aelbow)  +   " "   +   str (awrist)) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Get the robot position after the movement sequence \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 pret, robotPos  =   vrep.simxGetObjectPosition(clientID, robotHandle,  - 1 , vrep.simx_opmode_buffer) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "2w1a position: (x = "   +   str (robotPos[ 0 ])  + \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", y = "   +   str (robotPos[ 1 ])  +   ")" ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # Get the robot orientation after the movement sequence \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 oret, robotOrient  =   vrep.simxGetObjectOrientation(clientID, robotHandle,  - 1 , vrep.simx_opmode_buffer) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "2w1a orientation: (x = "   +   str (robotOrient[ 0 ])  + \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", y = "   +   str (robotOrient[ 1 ])  + \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 ", z = "   +   str (robotOrient[ 2 ])  +   ")" ) \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # End the simulation, wait to be sure V-REP had the time to stop it entirely \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxStopSimulation \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 vrep.simxStopSimulation(clientID, opmode) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 time.sleep( 1 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "----- Simulation ended -----" ) \n \xa0 \n \xa0\xa0\xa0\xa0 # Close the connection to V-REP remote server \n \xa0\xa0\xa0\xa0 # http://www.coppeliarobotics.com/helpFiles/en/remoteApiFunctionsPython.htm#simxFinish \n \xa0\xa0\xa0\xa0 vrep.simxFinish(clientID) \n else : \n \xa0\xa0\xa0\xa0 print   ( \'Failed connecting to remote API server\' ) \n print   ( \'End\' ) \n \n \n \n \n \n \n \n CoppeliaSim 場景 remote API 協同監控流程: \n \n 各組員下載 \xa0 https://portableapps.com/apps/music_video/obs-studio-portable \n 擔任 CoppliaSim 場景直播者時, 必須以 @gm 帳號登入 Youtube 後, 啟動 Live stream 取得直播串流金鑰, 將金鑰輸入 OBS 後, 擷取電腦顯示器啟動串流, 然後利用 copy video url 取得直播網址. \n 將直播網誌公布在 \xa0 https://gitter.im/mdecourse/cd2021 , 並附上伺服器 IPv4 內部網路 IP 位址與場景開放埠號. \n 直播者同時必須在個人網站上公布 Python remote API 操控直播場景相關參變數以及監控條件. \n 待遠端各協同操控學員準備就緒後, 完成操控流程後將所錄製的影片嵌入個人與分組網站中. \n \n task 3 \n 每週各組按照組員順序, 於每堂課程時段, 輪流由 2-3 名學員啟動 OBS + Youtube 直播 (每週每位學員均需輪流負責直播工作項目內容), 並在開播前將直播 URL 公布於課程 gitter, 以展示該時段該組針對 stage3 分組專題工作項目的協同過程. (即每週各組於上課時段均會有四段協同設計影片分別嵌入各負責直播錄影組員的網頁與分組網頁). \n 各直播錄影時段, 各直播組員 (2-3 名) 應先規劃進行中工作項目的網際簡報資料, 並依照簡報內容逐一介紹所要展示或討論的協同設計項目. \n 當其他組別在執行 stage3 分組專題內容碰到問題時, 應按照順序採取下列步驟解決問題: \n \n 利用協同直播錄影時段, 輔以網際簡報資料, 明確說明所遭遇之問題情境. \n 上述影片上傳並嵌入個人網站與分組網站後, 根據問題描述影片內容, 尋求其他組在其分段直播時段說明如何解題. \n \n 各組組員於進行 stage3 分組專題期間, 均應協同負責從 零組件設計繪圖 , \xa0 零件轉檔 , 零組件轉入 \xa0 CoppeliaSim 進行設定 , \xa0 Lua 監控 , \xa0 Python 監控 , \xa0 直播錄影 , ssh 維護 個人網際簡報 , ssh 維護 個人網站 , 並協同參與維護 分組網站 等工作項目, 若過程中遭遇問題, 則根據上述步驟進行解題. \n 直播前: 準備網際投影片 \n 開啟直播: 將直播投影片(即直播主題) 與直播連結登錄在 \xa0 https://gitter.im/mdecourse/cd2021 \n 直播結束後: 將影片嵌入個人與分組網頁後, 連結繳交至 \xa0 https://github.com/mdecourse/cd2021/discussions/24 \n 抽選各分組直播學員的程式: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n 50 \n 51 \n 52 \n \n \n \n # open file, default is read mode, since txt content no chinese char \n # no encoding = "UTF-8" is needed \n import   random \n \xa0 \n # number of group menber to draw \n num  =   2 \n \xa0 \n # check if data is "" or not \n def   notVacant(data): \n \xa0\xa0\xa0\xa0 if   data  = =   "": \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   False \n \xa0\xa0\xa0\xa0 else : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   True \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \xa0 \n with  open ( "stage3_2b.txt" ) as fh: \n \xa0\xa0\xa0\xa0 # readlines will read into the whole line and put into list format \n \xa0\xa0\xa0\xa0 # has \\n at the end of each line \n \xa0\xa0\xa0\xa0 data  =   fh.readlines() \n #print(len(data)) \n # big group list \n bgroup  =   [] \n # count from the second group member \n sgroup  =   [] \n for   i  in   range ( len (data)): \n \xa0\xa0\xa0\xa0 group  =   data[i].rstrip( "\\n" ).split( "\\t" ) \n \xa0\xa0\xa0\xa0 #print(group) \n \xa0\xa0\xa0\xa0 # use mem to count the total number of each group \n \xa0\xa0\xa0\xa0 mem  =   0 \n \xa0\xa0\xa0\xa0 # final group data \n \xa0\xa0\xa0\xa0 fgroup  =   [] \n \xa0\xa0\xa0\xa0 # count from the second group member, eliminate the first element \n \xa0\xa0\xa0\xa0 sgroup  =   group[ 1 :] \n \xa0\xa0\xa0\xa0 # get only the odd index number \n \xa0\xa0\xa0\xa0 igroup  =   [i  for   i  in   range ( len (sgroup))  if   i  %   2   = =   1 ] \n \xa0\xa0\xa0\xa0 for   j  in   igroup: \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # index starts from 0 which is j-1 when j=1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   notVacant(sgroup[j - 1 ])  = =   True : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 mem  + =   1 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fgroup.append(sgroup[j - 1 ]) \n \xa0\xa0\xa0\xa0 print ( "group "   +   str (i + 1 )  +   ":"   +   str (mem)) \n \xa0\xa0\xa0\xa0 # shuffle the fgroup list \n \xa0\xa0\xa0\xa0 random.shuffle(fgroup) \n \xa0\xa0\xa0\xa0 # draw num of member from final group list: fgroup \n \xa0\xa0\xa0\xa0 for   k  in   range (num): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 try : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print (fgroup[k]) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 except : \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # num is greater than total number of this group \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "no such member" ) \n \xa0\xa0\xa0\xa0 # seperator \n \xa0\xa0\xa0\xa0 print ( "-" * 20 ) \n # the following will use group data to generate needed html \n \n \n \n \n \n \n \n 人形 Robot 模擬套件比較: \n A Comparison of Humanoid Robot Simulators A Quantitative Approach.pdf \n For robotic systems to be implemented in real-world scenarios, in several situations, it is preferred to develop and test them under controlled environments in order to reduce the risk of errors and unexpected behavior. \xa0In this regard, a more accessible and efficient alternative is to implement\xa0 the environment using robotic simulation tools. \n In general terms, our results show that Webots is the simulator with the lowest use ofresources, followed by V-REP, which has advantages over Gazebo, mainly because of the CPU use. \n Robot simulators allow evaluating the feasibility and efficiency of algorithms varying in type and complexity, in a more controlled environment with no disturbances avoiding the occurrence of accidents. \n', 'tags': '', 'url': 'W10 小組task.html'}, {'title': 'W11', 'text': '', 'tags': '', 'url': 'W11.html'}, {'title': 'W12', 'text': '', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}, {'title': 'W15', 'text': '\n', 'tags': '', 'url': 'W15.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n \n \n', 'tags': '', 'url': 'Develop.html'}]};